---
name: Docker Build & Deploy

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linter
        run: bun run lint

      - name: Type check
        run: bun run type-check

      - name: Build project
        run: bun run build

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.push.outputs.digest }}
      image-url: ${{ steps.push.outputs.image-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.run_number }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate artifact attestation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-dev:
    name: Build Development Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build development Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.run_number }}
          labels: |
            org.opencontainers.image.title=Medusa 2.0 Dev
            org.opencontainers.image.description=Development build of Medusa 2.0
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging') && needs.build-and-push.result == 'success'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-url }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

          # Add your staging deployment commands here
          # Example: SSH into server and update docker-compose
          # ssh user@staging-server "cd /path/to/app && docker-compose pull && docker-compose up -d"

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check commands here
          # curl -f https://staging.medusa.ecsc-uok.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') && needs.build-and-push.result == 'success'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-url }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

          # Add your production deployment commands here
          # Example: SSH into server and update docker-compose
          # ssh user@prod-server "cd /path/to/app && docker-compose pull && docker-compose up -d"

      - name: Health check
        run: |
          echo "Performing production health check..."
          # Add health check commands here
          # curl -f https://medusa.ecsc-uok.com/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "üåê https://medusa.ecsc-uok.com"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: github.ref == 'refs/heads/main' && always()

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
